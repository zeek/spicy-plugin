# @TEST-EXEC: spicyz -o test.hlto %INPUT barrier.evt
# @TEST-EXEC: zeek -b -Cr ${TRACES}/barrier.pcap Zeek::Spicy test.hlto Spicy::enable_print=T >output
# @TEST-EXEC: btest-diff output
#
# @TEST-DOC: Use barriers to model a protocol where request/response pairs need to be processed in lock step.

module Test;

type Context = struct {
    request: barrier(1);
    reply: barrier(1);
};

public type Requests = unit {
    %context = Context;

    on %init {
        self.context().reply.arrive();
    }

    : (Request(self.context()))[];
};

type Request = unit(ctx: Context&) {
    on %init {
        ctx.reply.wait();
        ctx.reply.reset();
    }

    /[^\n]+\n/ { print $$.strip(); }

    on %done {
        ctx.request.arrive();
    }

};

public type Replies = unit {
    %context = Context;

    : (Reply(self.context()))[];
};

type Reply = unit(ctx: Context&) {
    on %init {
        ctx.request.wait();
        ctx.request.reset();
    }

    /[^\n]+\n/ { print $$.strip(); }

    on %done {
        ctx.reply.arrive();
    }

};


@TEST-START-FILE barrier.evt

import zeek;

protocol analyzer spicy::Test over TCP:
    parse originator with Test::Requests,
    parse responder with Test::Replies,
    port 12345/tcp;

@TEST-END-FILE
